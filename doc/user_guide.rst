User Guide
==========

Most users will use DHALSIM in two ways: Running the included examples or creating examples of their own.

DHALSIM default examples
--------------

DHALSIM includes some ready to use topologies/experiments in the /examples folders.

These examples are some of the common topologies such as anytown, ctown, minitown, ky13, ky14, ky15, and a modified
version of the iTrust WADI testbed. A DHALSIM experiment needs at minimum 3 files:

* an INP file. This is the EPANET file that describes the water distribution system
* a YAML configuration file. This is the main experiment configuration file
* a PLCs YAML file. This is a file that describes how many PLCs will be present in the experiment and distributes
  which PLC will handle which set of sensors of actuators. Two considerations are important with this file. The first
  consideration is that the SCADA node will poll ech PLC to obtain the values that such PLC has configured in this file.
  This is done automatically by DHALSIM and is the default behaviour of a SCADA node. The SCADA node will also include
  the values of those variables in the "scada_Values.csv" output file at the end of the experiment. Also notice that
  some attacks might cause these SCADA values to differ from ground truth values; for example, attacks with concealment.
  The second consideration is that the SCADA values file will only contain the variables present in the PLCs YAML file,
  users should make sure to assign one of these variables to a PLC if they want to see it present in the SCAD values
  file

Using these files, DHALSIM will create a MinCPS topology that includes PLCs exchanging values to control the water
distribution system, an SCADA server polling the PLCs for their variables, and a WNTR/epynet simulation running
the water distribution system. In addition, DHALSIM will automatically parse the [CONTROLS] section of the EPANET
file and implement that logic into each PLC.

All the information about the experiment is stored in a file called "intermediate.yaml", this file might be useful
to debug experiments. After the intermediate.yaml file is generated, the DHALSIM experiment will be launched and run
until the EPANET simulation is completed. At the end of the experiments the results files and configuration files will
be stored in the configured output folder. Two types of results are generated by DHALSIM: physical results an
network results. The physical results are .csv files containing the ground truth data (data seen by the EPANET
simulation) and scada values (data seen by the SCAD server). Attacks that implement concealment might cause the values
of thse two files to differ. Network results are .pcap files that store all the messages that the PLCs and routers
exchanged during the simulation. The physical results files include a "timestamp" field that can be used to
correlate network and physical results.

The default DHALSIM examples can be modified to run the simulation in different conditions. For example:

* Different attacks can be included. Multiple attacks can be executed at the same time. Nevertheless, targeting the same
  node with two different network attacks might have untested behaviour.

* DHALSIM supports options to change the initial tank levels of the tanks.

* DHALSIM supports changing the default demand pattern of the simulation

* Network conditions that are present during the entire simulation can be configured

* The PLCs file can be changed to include more or less PLCs or change the way the PLCs distribute the experiment
  variables

Nevertheless, some users will want to create their own examples. The next section explains how to create a new DHALSIM
example

Creating new DHALSIM examples
-----------------------------

The main reason to create a new DHALSIM example would be to simulate a different water distribution system. This would
be the normal process to create a new exmple file

1. Create a new subfolder into "examples" with the example name.

2. Create or copy into the folder the desired EPANET file. Notice that only simple [CONTROLS] are supported by DHALSIM.
   Controls implemented using the [RULES] sections of EPANET are not supported.

3. Create a PLCs Yaml File. See the section above for more information about this file.

4. Create a main experiment file, only the mandatory parameters need to be filled. All optional parameters will have
   default values.

5. If desired, create additional files such as: initial tank levels files, custom demand pattern files, network
   conditions files, attack files. If custom demand pattern files were generated. See the guide into custom demand
   patterns generation.

6. Launch the experiment



Creating custom demand patterns
-------------------------------

Custom demand patterns can be loaded into a DHALSIM experiment by generating a csv file. The format of this file should
be a timeseries, where each column represents a demand junction. The first row of each column is the junction name
(as defined in the EPANET file) and each subsewquent row represents a demad multiplier for the pattern timestep.










